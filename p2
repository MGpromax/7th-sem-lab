import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
import sklearn.metrics as metrics
dataset = pd.read_csv("/iris.csv")

X = dataset.iloc[:,:-1]
label = {'Iris-setosa':0,'Iris-versicolor':1,'Iris-virginica':2}
y = [label[c] for c in dataset.iloc[:,-1]]
plt.figure(figsize = (14,7))
colormap = np.array(['red','lime','black'])



plt.subplot(1,3,1)
plt.title("real")
plt.scatter(X.iloc[:,2],X.iloc[:,3] ,c = colormap[y])


model = KMeans(n_clusters = 3,random_state = 0).fit(X)
plt.subplot(1,3,2)
plt.title("GMM")
plt.scatter(X.iloc[:,2],X.iloc[:,3] ,c = colormap[model.labels_])
print("prediccted score is ",metrics.accuracy_score(y,model.labels_))
print("confusion matrics is ",metrics.confusion_matrix(y,model.labels_))



gmm = GaussianMixture(n_components = 3,random_state = 0).fit(X)
gmm_layer = gmm.predict(X)
plt.subplot(1,3,3)
plt.title("GMM")
plt.scatter(X.iloc[:,2],X.iloc[:,3] ,c = colormap[gmm_layer])
model = KMeans(n_clusters = 3,random_state = 0).fit(X)
print("prediccted score is ",metrics.accuracy_score(y,gmm_layer))
print("confusion matrics is ",metrics.confusion_matrix(y,gmm_layer))
plt.show()





